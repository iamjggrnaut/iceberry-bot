const { Telegraf, Markup } = require("telegraf");
const { Admin, Product } = require("../api/models/models");
require("dotenv").config();
const bot = new Telegraf("8026160087:AAE_s7_9tChz_njiq9QbYV-_VvDZ8Y-tC0s");

async function sendNewProductNotification(product) {
  console.log("DICK DICK DICK");
  console.log("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:", product); // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞

  try {
    const priceOptions = product.priceVariants.map(
      (item) => `${item.price}—Ä—É–±\n`
    );
    console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω:", priceOptions); // –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–Ω

    const message = `üéâ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä!
          *${product.name}*
          –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}
          
          üí∏ –¶–µ–Ω–∞: 
          ${priceOptions}
  
          üåç –°—Ç—Ä–∞–Ω–∞: ${product.country}
          üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}
          
          üñº [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${product.imageLink})`;

    const users = await Admin.findAll({ where: { role: "USER" } });
    console.log("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users.length); // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if (users.length === 0) return;

    for (const user of users) {
      try {
        const chatId = parseInt(user.username); // –ï—Å–ª–∏ username —Ö—Ä–∞–Ω–∏—Ç chatId
        if (!isNaN(chatId)) {
          console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", chatId); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
          await bot.telegram.sendPhoto(
            chatId,
            { photo: product.imageLink },
            {
              caption: message,
              parse_mode: "Markdown",
            }
          );
        } else {
          console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chatId: ${user.username}`);
        }
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}:`,
          error.message
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error.message);
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    const chatId = ctx.message.chat.id.toString();
    const username = ctx.message.chat.username || chatId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId, –µ—Å–ª–∏ username –Ω–µ—Ç

    await Admin.findOrCreate({
      where: { username },
      defaults: { role: "USER", password: "default_password" },
    });

    await ctx.reply(
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /catalog."
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /catalog
bot.command("catalog", async (ctx) => {
  try {
    const products = await Product.findAll();
    if (products.length === 0) {
      return ctx.reply("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.");
    }

    const buttons = products.map((product) => [
      Markup.button.callback(product.name, `product_${product.id}`),
    ]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", Markup.inlineKeyboard(buttons));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:", error.message);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
bot.on("callback_query", async (ctx) => {
  try {
    const productId = ctx.callbackQuery.data.split("_")[1];
    const product = await Product.findByPk(productId);

    if (!product) {
      return ctx.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const message = `*${product.name}*
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}

üí∏ –¶–µ–Ω–∞: 
${product.priceVariants.map(
  (item) => `${(Number(item.weight) / 1000).toFixed(2)}–∫–≥ - ${item.price}—Ä—É–±`
)}

üåç –°—Ç—Ä–∞–Ω–∞: ${product.country}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`;

    console.log(product);

    await ctx.replyWithPhoto(
      { url: `${product.imageLink}` },
      { caption: message, parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:", error.message);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.");
  }
});

bot
  .launch()
  .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

module.exports = { bot, sendNewProductNotification };
